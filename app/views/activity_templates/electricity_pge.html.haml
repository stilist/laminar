:ruby
	item = locals["data"]
	data = eval item["time_series"]
	sum = data.inject { |sum,n| sum + n }

	time_series = []
	data.each_with_index do |sample, idx|
		time = locals["created_at"] + (60 * 60 * idx)
		timestamp = time.localtime.strftime "%D %T"
		time_series << "'#{timestamp},#{sample}\\n'"
	end

%h1.entry-title
	used #{sum}
	%abbr{ title: "kilowatt-hours" }
		kWÂ·h
	of electricity

	- if locals["extras"]["full_view"]
		%section.entry-content
			%div{ id: "graph_#{locals["id"]}" }
			:ruby
				hsl = item_hsl locals, false
				color = ColorMath::HSL.new *hsl
				graph_color = ColorMath::Adjust.luminance(color, 1 - hsl[2]).hex

			:javascript
				function kill_dygraph_event(e) { Dygraph.cancelEvent(e); }

				options = {
					axisLineColor: "#{graph_color}",
					colors: ["#{graph_color}"],
					drawXGrid: false,
					drawYAxis: false,
					drawYGrid: false,
					height: 100,
					highlightCircleSize: 0,
					rollPeriod: 1,
					showLabelsOnHighlight: false,
					width: "100%",
					valueRange: [0, 10],
					interactionModel: {
						"mousedown": kill_dygraph_event,
						"mousemove": kill_dygraph_event,
						"mouseup": kill_dygraph_event,
						"click": kill_dygraph_event,
						"dblclick": kill_dygraph_event,
						"mousewheel": function () { return; }
					}
				}

				new Dygraph(
					document.getElementById("graph_#{locals["id"]}"),
					#{time_series.join("+")},
					options
				);

			:css
				#graph_#{locals["id"]} .dygraph-axis-label {color:#{graph_color}; opacity:0.5;}
