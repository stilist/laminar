= will_paginate(@items, { inner_window: 2 }) if @items

/ Libraries
= javascript_include_tag "//ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"
= javascript_script_tag "assets/vendor.js"
= javascript_script_tag "//maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"
= javascript_script_tag "//use.typekit.net/yws8cub.js"

/ App
= javascript_script_tag "assets/boot.js"

:javascript
	try { Typekit.load(); } catch (e) {}

/[if IE]
	= javascript_script_tag "//html5shiv.googlecode.com/svn/trunk/html5.js"

:ruby
	def sleep_cycle_start item
		item["created_at"] - item["data"]["duration"].to_i
	end

	@items = [@item] if @item

	if @items
		timestamps = []

		timestamps = @items.map do |item|
			if item["source"] == "sleep_cycle"
				ts_start = sleep_cycle_start item
				ts_end = item["created_at"]
			else
				ts_start = item["created_at"]
				ts_end = ts_start + (5 * 60)
			end

			[ts_start.to_s, ts_end.to_s]
		end
	end

:javascript
	var timeline_dates = #{timestamps || []};

:ruby
	date = Time.now
	hue = [360, date.yday].min + 240
	hue = (hue > 360) ? (hue - 360) : hue

	# minutes...   [       through day       ]   [in day]
	pct_of_day = (((date.hour * 60) + date.min) / 1400.0) * 100
	# Peak at midday
	luminance = (pct_of_day > 50 ? (100 - pct_of_day) : pct_of_day).floor.abs / 100.0

	# bump `luminance` to keep enough contrast at night
	color = ColorMath::HSL.new hue, 1, (luminance + 0.2)
	time_color = color.hex
	active_time_color = ColorMath::Adjust.luminance(color, 0.2).hex

:css
	#nameplate {border-top-color:#{time_color};}
	a {border-bottom-color:#{time_color}; color:#{time_color};}
	a:active,
	a:hover {color:#{active_time_color};}
